<?xml version="1.0" encoding="UTF-8"?>
<!--
====================================================================================================================================
	* File Name				: CommonV3.xsd
	* Author					: Johan Kumps - Peter Van den Bosch
	* Owner					: Crossroad Bank for Social Security (CBSS)
	* Domain					: CBSS Registries Public Services
	* Creation Date			: 31-05-2010
	* Description				: This XML schema document contains a set of Common XML  type definition and content model fragments for use in CBSS webservices and batch file schema definitions within the CBSS domain. 
	* Revision History		: 09-03-2011  	String2Type added
	*														LegalContext added
	*														DescriptionType refactored + lenght constraint 50 changed to 100
	*														InformationCustomerType.ticket length constraint 32 changed to 36
	*														LegalContext + IntegrationContext concepts added
	*														RuntimeFaultType refactored to CBSSFaultType
	*														Parameters added to BaseRequestType
	*                                18-10-2011 		removed String100Type 
   *                                         				Added InformationNotificationCBSS/InformationNotified
   *                                         				Increased the max number of occurences of Information in CBSSFaultType from 5 to 15
	*									25-10-2011	Refactored unbounded business errors to 25
	*														Refactored SSINType to SsinType
   *                          09-11-2011 Changed namespace to v3
   *                                         thorough validation leading to modifications: see CBSS common XSD types.doc
   *                           18-01-2011          informationNotified: identification renamed to notifiedIdentification (consistency)
   *                                                          CbeNumberType: changed from 9 or 10 digits, to mandatory 10 digits
  *                                                          added types for euro amounts, enterprise numbers and business unit numbers
 *                                                          Removed status and business anomalies from BaseResponseType, as the request fields should be copied in the same order in the response
*                                20-03-2012        Renamed BaseDescriptionType to DescriptionType, removed old DescriptionType
*                                                        Removed DescriptionStyleParametersType
*                                                        Removed RegisterCharacterSetType
*                                 29-05-2012           Really remove RegisterCharacterSetType
*								  14-11-2013		Added InformationCBSSBatchType
*								  04-09-2014		Added SenderReceiverType
*								  07-01-2015		Added SequenceNumberType
*								  03-07-2015		Added NssoRegistrationNumberType
*                                 11-09-2015      Modified NssoRegistrationNumberType to allow both 9 long as temporary 10 long numbers starting with 51.
*                                 16-09-2015      Modified NssoRegistrationNumberType to 10 long numbers starting with 51 or with 0.
*                                 08-02-2016      Added StatusOkType
*                                 27-09-2016      Added YearQuarterType format yyyyQx, QuarterPeriodType and OpenQuarterPeriodType
*                                 04-04-2018      Added DataFiltersType
*                                 27-11-2018      Added LocalizedDescription(s)Type
*                                 04-01-2019      Added SsinWithCanceledAndReplacesStatusType and SsinWithCanceledAndReplacedByStatusType
====================================================================================================================================
-->
<xsd:schema xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:tns="http://kszbcss.fgov.be/types/common/v3" targetNamespace="http://kszbcss.fgov.be/types/common/v3" elementFormDefault="unqualified" attributeFormDefault="unqualified" version="3.3-45">
	<!-- Request / response meta data -->
	<xsd:simpleType name="SeverityType">
		<xsd:restriction base="xsd:string">
			<xsd:enumeration value="INFORMATION"/>
			<xsd:enumeration value="WARNING"/>
			<xsd:enumeration value="FATAL"/>
		</xsd:restriction>
	</xsd:simpleType>
	<xsd:simpleType name="UUIDType">
		<xsd:restriction base="xsd:string">
			<xsd:pattern value="[\da-fA-F]{8}-[\da-fA-F]{4}-[\da-fA-F]{4}-[\da-fA-F]{4}-[\da-fA-F]{12}"/>
		</xsd:restriction>
	</xsd:simpleType>
	<xsd:simpleType name="TicketType">
		<xsd:restriction base="xsd:string">
			<xsd:maxLength value="36"/>
		</xsd:restriction>
	</xsd:simpleType>
	<xsd:simpleType name="CbeNumberType">
		<xsd:annotation>
			<xsd:documentation>CBE number identifying an enterprise or business unit</xsd:documentation>
		</xsd:annotation>
		<xsd:restriction base="xsd:string">
			<xsd:pattern value="\d{10}"/>
		</xsd:restriction>
	</xsd:simpleType>
	<xsd:simpleType name="EnterpriseNumberType">
		<xsd:annotation>
			<xsd:documentation>CBE enterprise number (starting with 0 or 1)</xsd:documentation>
		</xsd:annotation>
		<xsd:restriction base="xsd:string">
			<xsd:pattern value="[0-1]\d{9}"/>
		</xsd:restriction>
	</xsd:simpleType>
	<xsd:simpleType name="BusinessUnitNumberType">
		<xsd:annotation>
			<xsd:documentation>CBE business unit number (starting with 2-8)</xsd:documentation>
		</xsd:annotation>
		<xsd:restriction base="xsd:string">
			<xsd:pattern value="[2-8]\d{9}"/>
		</xsd:restriction>
	</xsd:simpleType>
	<xsd:simpleType name="SsinType">
		<xsd:restriction base="xsd:string">
			<xsd:pattern value="[0-9][0-9](([0][0-9])|([1][0-2]))(([0-2][0-9])|([3][0-1]))(([0-9]{2}[1-9])|([0-9][1-9][0-9])|([1-9][0-9]{2}))(([0-8][0-9])|([9][0-7]))">
				<xsd:annotation>
					<xsd:documentation xml:lang="FR">Registre National</xsd:documentation>
					<xsd:documentation xml:lang="NL">Rijksregister</xsd:documentation>
				</xsd:annotation>
			</xsd:pattern>
			<xsd:pattern value="[0-9][0-9](([2][0-9])|([3][0-2]))(([0-2][0-9])|([3][0-1]))[0-9]{3}(([0-8][0-9])|([9][0-7]))">
				<xsd:annotation>
					<xsd:documentation xml:lang="FR">Registre Bis : numero Bis</xsd:documentation>
					<xsd:documentation xml:lang="NL">Bis register : Bisnummer</xsd:documentation>
				</xsd:annotation>
			</xsd:pattern>
			<xsd:pattern value="[0-9][0-9](([4][0-9])|([5][0-2]))(([0-2][0-9])|([3][0-1]))[0-9]{3}(([0-8][0-9])|([9][0-7]))">
				<xsd:annotation>
					<xsd:documentation xml:lang="FR">Registre Bis : numero TER</xsd:documentation>
					<xsd:documentation xml:lang="NL">Bisregister : Ternummer</xsd:documentation>
				</xsd:annotation>
			</xsd:pattern>
		</xsd:restriction>
	</xsd:simpleType>
	<xsd:simpleType name="LegalContextType">
		<xsd:restriction base="xsd:string">
			<xsd:maxLength value="64"/>
		</xsd:restriction>
	</xsd:simpleType>
	<xsd:simpleType name="IntegrationContextType">
		<xsd:annotation>
			<xsd:documentation>deprecated type. Use InscriptionContextType instead in new XSDs</xsd:documentation>
		</xsd:annotation>
		<xsd:restriction base="xsd:string">
			<xsd:maxLength value="64"/>
		</xsd:restriction>
	</xsd:simpleType>
	<xsd:simpleType name="InscriptionContextType">
		<xsd:annotation>
			<xsd:documentation>The way in which an organization knows a person (textual equivalent of former numerical quality code)</xsd:documentation>
		</xsd:annotation>
		<xsd:restriction base="xsd:string">
			<xsd:maxLength value="64"/>
		</xsd:restriction>
	</xsd:simpleType>
	<xsd:simpleType name="SequenceNumberType">
		<xsd:restriction base="xsd:long">
			<xsd:minInclusive value="1"/>
			<xsd:totalDigits value="15"/>
		</xsd:restriction>
	</xsd:simpleType>
	<xsd:complexType name="InformationCBSSType">
		<xsd:annotation>
			<xsd:documentation>Information block from CBSS.</xsd:documentation>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:element name="ticketCBSS" type="tns:UUIDType"/>
			<xsd:element name="timestampReceive" type="xsd:dateTime">
				<xsd:annotation>
					<xsd:documentation>Time request was received by CBSS.</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
			<xsd:element name="timestampReply" type="xsd:dateTime">
				<xsd:annotation>
					<xsd:documentation>Time reply was sent by CBSS.</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
		</xsd:sequence>
	</xsd:complexType>
	<xsd:complexType name="InformationCustomerType">
		<xsd:annotation>
			<xsd:documentation>Information block that can be used by the customer for diagnostic use.</xsd:documentation>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:element name="ticket" type="tns:TicketType" minOccurs="0">
				<xsd:annotation>
					<xsd:documentation>Client can assign their own ticket reference for the request. Not mandatory. For non-UUID tickets only the first 32 chars are stored at CBSS.</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
			<xsd:element name="timestampSent" type="xsd:dateTime" minOccurs="0">
				<xsd:annotation>
					<xsd:documentation>Timestamp when client sent request.</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
			<xsd:element name="customerIdentification" type="tns:OrganizationIdentificationType"/>
		</xsd:sequence>
	</xsd:complexType>
	<xsd:complexType name="InformationSupplierType">
		<xsd:annotation>
			<xsd:documentation>Information block for supplier of a service</xsd:documentation>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:element name="ticket" type="tns:TicketType" minOccurs="0">
				<xsd:annotation>
					<xsd:documentation>UUID generated by Customer or Supplier</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
			<xsd:element name="timestampReceive" type="xsd:dateTime" minOccurs="0">
				<xsd:annotation>
					<xsd:documentation>Time of request</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
			<xsd:element name="timestampReply" type="xsd:dateTime" minOccurs="0">
				<xsd:annotation>
					<xsd:documentation>Time of request</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
			<xsd:element name="supplierIdentification" type="tns:OrganizationIdentificationType"/>
		</xsd:sequence>
	</xsd:complexType>
	<xsd:complexType name="InformationNotificationCBSSType">
		<xsd:annotation>
			<xsd:documentation>Deprecated type. Use SenderReceiverType in new batch XSDs. Information block for CBSS info when CBSS notifies partner</xsd:documentation>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:element name="ticketCBSS" type="tns:UUIDType">
				<xsd:annotation>
					<xsd:documentation>UUID generated by Customer or Supplier</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
			<xsd:element name="timestampSent" type="xsd:dateTime">
				<xsd:annotation>
					<xsd:documentation>Time of request</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
		</xsd:sequence>
	</xsd:complexType>
	<xsd:complexType name="InformationNotifiedType">
		<xsd:annotation>
			<xsd:documentation>Deprecated type. Use SenderReceiverType in new batch XSDs. Information block for partner info when CBSS notifies partner</xsd:documentation>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:element name="ticket" type="tns:TicketType" minOccurs="0"/>
			<xsd:element name="timestampReply" type="xsd:dateTime" minOccurs="0"/>
			<xsd:element name="notifiedIdentification" type="tns:OrganizationIdentificationType"/>
		</xsd:sequence>
	</xsd:complexType>
	<xsd:complexType name="InformationCBSSBatchType">
		<xsd:annotation>
			<xsd:documentation>Deprecated type. Use SenderReceiverType in new batch XSDs</xsd:documentation>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:element name="fileId" type="xsd:unsignedLong"/>
			<xsd:element name="fileCreationTimestamp" type="xsd:dateTime"/>
		</xsd:sequence>
	</xsd:complexType>
	<xsd:complexType name="SenderReceiverType">
		<xsd:annotation>
			<xsd:documentation>Information block containing info about the sender or receiver of a message.</xsd:documentation>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:element name="ticket" type="tns:TicketType" minOccurs="0">
				<xsd:annotation>
					<xsd:documentation>The partner can assign a ticket reference to the message. Not mandatory.</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
			<xsd:element name="timestampSent" type="xsd:dateTime" minOccurs="0">
				<xsd:annotation>
					<xsd:documentation>Timestamp when message was sent. In the receiver block of response messages the timestampSent is the timestamp when the request was created by the organization that receives the response.</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
			<xsd:element name="organizationIdentification" type="tns:OrganizationIdentificationType"/>
		</xsd:sequence>
	</xsd:complexType>
	<xsd:complexType name="OrganizationIdentificationType">
		<xsd:choice>
			<xsd:element name="cbeNumber" type="tns:CbeNumberType"/>
			<xsd:sequence>
				<xsd:element name="sector">
					<xsd:simpleType>
						<xsd:restriction base="xsd:unsignedShort">
							<xsd:maxInclusive value="999"/>
						</xsd:restriction>
					</xsd:simpleType>
				</xsd:element>
				<xsd:element name="institution">
					<xsd:simpleType>
						<xsd:restriction base="xsd:unsignedShort">
							<xsd:maxInclusive value="999"/>
						</xsd:restriction>
					</xsd:simpleType>
				</xsd:element>
			</xsd:sequence>
		</xsd:choice>
	</xsd:complexType>
	<xsd:complexType name="OpenPeriodType">
		<xsd:annotation>
			<xsd:documentation>Period containing a begin date and an optional end date.</xsd:documentation>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:element name="beginDate" type="xsd:date"/>
			<xsd:element name="endDate" type="xsd:date" minOccurs="0"/>
		</xsd:sequence>
	</xsd:complexType>
	<xsd:complexType name="PeriodType">
		<xsd:annotation>
			<xsd:documentation>Period containing a begin date and an end date.</xsd:documentation>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:element name="beginDate" type="xsd:date"/>
			<xsd:element name="endDate" type="xsd:date"/>
		</xsd:sequence>
	</xsd:complexType>
	<xsd:complexType name="OpenQuarterPeriodType">
		<xsd:annotation>
			<xsd:documentation>Quarter period containing a quarter begin date and an optional quarter end date.</xsd:documentation>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:element name="beginQuarter" type="tns:YearQuarterType"/>
			<xsd:element name="endQuarter" type="tns:YearQuarterType" minOccurs="0"/>
		</xsd:sequence>
	</xsd:complexType>
	<xsd:complexType name="QuarterPeriodType">
		<xsd:annotation>
			<xsd:documentation>Quarter period containing a quarter begin date and a quarter end date.</xsd:documentation>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:element name="beginQuarter" type="tns:YearQuarterType"/>
			<xsd:element name="endQuarter" type="tns:YearQuarterType"/>
		</xsd:sequence>
	</xsd:complexType>
	<xsd:simpleType name="YearQuarterType">
		<xsd:restriction base="xsd:string">
			<xsd:length value="6"/>
			<xsd:whiteSpace value="collapse"/>
			<xsd:pattern value="[1-2]\d{3}Q(1|2|3|4)"/>
		</xsd:restriction>
	</xsd:simpleType>
	<xsd:simpleType name="IncompleteDateType">
		<xsd:annotation>
			<xsd:documentation>A possibly incomplete date. Format yyyy-mm-dd, yyyy-mm-00 or yyyy-00-00
            </xsd:documentation>
		</xsd:annotation>
		<xsd:restriction base="xsd:string">
			<xsd:length value="10"/>
			<xsd:whiteSpace value="collapse"/>
			<xsd:pattern value="[0-2][0-9]{3}\-[0-1][0-9]\-[0-3][0-9]"/>
		</xsd:restriction>
	</xsd:simpleType>
	<xsd:simpleType name="DescriptionType">
		<xsd:restriction base="xsd:string">
			<xsd:maxLength value="100"/>
		</xsd:restriction>
	</xsd:simpleType>
	<xsd:simpleType name="LanguageType">
		<xsd:annotation>
			<xsd:documentation>Type specifying the language of a given value</xsd:documentation>
		</xsd:annotation>
		<xsd:restriction base="xsd:string">
			<xsd:enumeration value="NL"/>
			<xsd:enumeration value="FR"/>
			<xsd:enumeration value="DE"/>
		</xsd:restriction>
	</xsd:simpleType>
	<xsd:complexType name="LocalizedDescriptionType">
		<xsd:simpleContent>
			<xsd:extension base="tns:DescriptionType">
				<xsd:attribute name="language" type="tns:LanguageType" use="optional"/>
			</xsd:extension>
		</xsd:simpleContent>
	</xsd:complexType>
	<xsd:complexType name="LocalizedDescriptionsType">
		<xsd:sequence>
			<xsd:element name="description" type="tns:LocalizedDescriptionType" maxOccurs="3"/>
		</xsd:sequence>
	</xsd:complexType>
	<xsd:complexType name="DataFiltersType">
		<xsd:annotation>
			<xsd:documentation>Type indicating which data elements have been filtered</xsd:documentation>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:element name="filteredElement" type="xsd:string" maxOccurs="unbounded"/>
		</xsd:sequence>
	</xsd:complexType>
	<!-- Errors and warnings structures -->
	<xsd:group name="BusinessAnomaliesContentFragment">
		<xsd:annotation>
			<xsd:documentation>Structure reporting business errors to the consumer</xsd:documentation>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:element name="businessAnomalies" type="tns:BusinessAnomaliesType" minOccurs="0"/>
		</xsd:sequence>
	</xsd:group>
	<xsd:complexType name="BusinessAnomaliesType">
		<xsd:annotation>
			<xsd:documentation>Type defining the structure of the part of the response containing business Faults</xsd:documentation>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:element name="businessAnomaly" type="tns:BusinessAnomalyType" maxOccurs="25"/>
		</xsd:sequence>
	</xsd:complexType>
	<xsd:complexType name="BusinessAnomalyType">
		<xsd:annotation>
			<xsd:documentation>Type defining the structure of one business Faults</xsd:documentation>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:element name="code" type="xsd:string">
				<xsd:annotation>
					<xsd:documentation>Unique code referring to a description of this Fault </xsd:documentation>
				</xsd:annotation>
			</xsd:element>
			<xsd:element name="severity" type="tns:SeverityType"/>
			<xsd:element name="description">
				<xsd:annotation>
					<xsd:documentation>Some description of this Fault</xsd:documentation>
				</xsd:annotation>
				<xsd:simpleType>
					<xsd:restriction base="xsd:string">
						<xsd:maxLength value="256"/>
					</xsd:restriction>
				</xsd:simpleType>
			</xsd:element>
			<xsd:element name="information" type="tns:InformationType" minOccurs="0" maxOccurs="15"/>
		</xsd:sequence>
	</xsd:complexType>
	<xsd:complexType name="CBSSFaultType">
		<xsd:sequence>
			<xsd:element name="informationCustomer" type="tns:InformationCustomerType" minOccurs="0"/>
			<xsd:element name="informationCBSS" type="tns:InformationCBSSType"/>
			<xsd:element name="detail" type="tns:MessageType" maxOccurs="30"/>
		</xsd:sequence>
	</xsd:complexType>
	<xsd:complexType name="MessageType">
		<xsd:sequence>
			<xsd:element name="severity" type="tns:SeverityType"/>
			<xsd:element name="reasonCode">
				<xsd:simpleType>
					<xsd:restriction base="xsd:string">
						<xsd:maxLength value="16"/>
					</xsd:restriction>
				</xsd:simpleType>
			</xsd:element>
			<xsd:element name="diagnostic">
				<xsd:simpleType>
					<xsd:restriction base="xsd:string">
						<xsd:maxLength value="256"/>
					</xsd:restriction>
				</xsd:simpleType>
			</xsd:element>
			<xsd:element name="authorCode">
				<xsd:simpleType>
					<xsd:restriction base="xsd:string">
						<xsd:maxLength value="64"/>
					</xsd:restriction>
				</xsd:simpleType>
			</xsd:element>
			<xsd:element name="information" type="tns:InformationType" minOccurs="0" maxOccurs="15"/>
		</xsd:sequence>
	</xsd:complexType>
	<xsd:complexType name="InformationType">
		<xsd:sequence>
			<xsd:element name="fieldName">
				<xsd:simpleType>
					<xsd:restriction base="xsd:string">
						<xsd:maxLength value="64"/>
					</xsd:restriction>
				</xsd:simpleType>
			</xsd:element>
			<xsd:element name="fieldValue" minOccurs="0">
				<xsd:simpleType>
					<xsd:restriction base="xsd:string">
						<xsd:maxLength value="256"/>
					</xsd:restriction>
				</xsd:simpleType>
			</xsd:element>
		</xsd:sequence>
	</xsd:complexType>
	<!--Base types for most common request/response format for consultation type operations. Can be used to define request and response types with extension type inheritance. Don't use if it doesn't fit the requirements.  -->
	<xsd:complexType name="BaseRequestType" abstract="true">
		<xsd:annotation>
			<xsd:documentation>Type defining the base structure for all service requests</xsd:documentation>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:element name="informationCustomer" type="tns:InformationCustomerType"/>
			<xsd:element name="informationCBSS" type="tns:InformationCBSSType" minOccurs="0"/>
			<xsd:element name="legalContext" type="tns:LegalContextType">
				<xsd:annotation>
					<xsd:documentation>legal context under which the request was made</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
		</xsd:sequence>
	</xsd:complexType>
	<xsd:complexType name="BaseResponseType" abstract="true">
		<xsd:annotation>
			<xsd:documentation>Type defining the base structure for all service responses</xsd:documentation>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:element name="informationCustomer" type="tns:InformationCustomerType"/>
			<xsd:element name="informationCBSS" type="tns:InformationCBSSType"/>
			<xsd:element name="legalContext" type="tns:LegalContextType"/>
		</xsd:sequence>
	</xsd:complexType>
	<!-- Commonly used status type for consultation type operations. Define another if it doesn't fit requirements.-->
	<xsd:complexType name="StatusType">
		<xsd:sequence>
			<xsd:element name="value">
				<xsd:annotation>
					<xsd:documentation>global status of the result</xsd:documentation>
				</xsd:annotation>
				<xsd:simpleType>
					<xsd:restriction base="xsd:string">
						<xsd:enumeration value="DATA_FOUND"/>
						<xsd:enumeration value="NO_DATA_FOUND"/>
						<xsd:enumeration value="NO_RESULT"/>
					</xsd:restriction>
				</xsd:simpleType>
			</xsd:element>
			<xsd:element name="code">
				<xsd:annotation>
					<xsd:documentation>the code of the status</xsd:documentation>
				</xsd:annotation>
				<xsd:simpleType>
					<xsd:restriction base="xsd:string">
						<xsd:maxLength value="16"/>
					</xsd:restriction>
				</xsd:simpleType>
			</xsd:element>
			<xsd:element name="description" minOccurs="0">
				<xsd:annotation>
					<xsd:documentation>the description of the status</xsd:documentation>
				</xsd:annotation>
				<xsd:simpleType>
					<xsd:restriction base="xsd:string">
						<xsd:maxLength value="256"/>
					</xsd:restriction>
				</xsd:simpleType>
			</xsd:element>
			<xsd:element name="information" type="tns:InformationType" minOccurs="0" maxOccurs="15"/>
		</xsd:sequence>
	</xsd:complexType>
	<!-- Commonly used status type for ok/nok type operations like notifications. Don't use if it doesn't fit requirements.-->
	<xsd:complexType name="StatusOkType">
		<xsd:sequence>
			<xsd:element name="value">
				<xsd:annotation>
					<xsd:documentation>global status of the result</xsd:documentation>
				</xsd:annotation>
				<xsd:simpleType>
					<xsd:restriction base="xsd:string">
						<xsd:enumeration value="OK"/>
						<xsd:enumeration value="NOK"/>
					</xsd:restriction>
				</xsd:simpleType>
			</xsd:element>
			<xsd:element name="code">
				<xsd:annotation>
					<xsd:documentation>the code of the status</xsd:documentation>
				</xsd:annotation>
				<xsd:simpleType>
					<xsd:restriction base="xsd:string">
						<xsd:maxLength value="16"/>
					</xsd:restriction>
				</xsd:simpleType>
			</xsd:element>
			<xsd:element name="description" minOccurs="0">
				<xsd:annotation>
					<xsd:documentation>the description of the status</xsd:documentation>
				</xsd:annotation>
				<xsd:simpleType>
					<xsd:restriction base="xsd:string">
						<xsd:maxLength value="256"/>
					</xsd:restriction>
				</xsd:simpleType>
			</xsd:element>
			<xsd:element name="information" type="tns:InformationType" minOccurs="0" maxOccurs="15"/>
		</xsd:sequence>
	</xsd:complexType>
	<xsd:simpleType name="EuroPositiveAmountType">
		<xsd:restriction base="xsd:decimal">
			<xsd:fractionDigits value="2"/>
			<xsd:maxExclusive value="1000000000000000"/>
		</xsd:restriction>
	</xsd:simpleType>
	<xsd:simpleType name="EuroAmountType">
		<xsd:restriction base="xsd:decimal">
			<xsd:fractionDigits value="2"/>
			<xsd:maxExclusive value="1000000000000000"/>
			<xsd:minExclusive value="-1000000000000000"/>
		</xsd:restriction>
	</xsd:simpleType>
	<xsd:simpleType name="EurocentPositiveAmountType">
		<xsd:restriction base="xsd:unsignedLong">
			<xsd:maxExclusive value="100000000000000000"/>
		</xsd:restriction>
	</xsd:simpleType>
	<xsd:simpleType name="EurocentAmountType">
		<xsd:restriction base="xsd:long">
			<xsd:minExclusive value="-100000000000000000"/>
			<xsd:maxExclusive value="100000000000000000"/>
		</xsd:restriction>
	</xsd:simpleType>
	<xsd:simpleType name="NssoRegistrationNumberType">
		<xsd:annotation>
			<xsd:documentation>Identification number of an enterprise at NSSO (= RSZ/ONSS). Numbers starting with 51 and length 10 are always temporary numbers.</xsd:documentation>
		</xsd:annotation>
		<xsd:restriction base="xsd:string">
			<xsd:pattern value="0\d{9}"/>
			<xsd:pattern value="51\d{8}"/>
		</xsd:restriction>
	</xsd:simpleType>
	    <xsd:complexType name="SsinWithCanceledAndReplacesStatusType">
        <xsd:simpleContent>
            <xsd:extension base="tns:SsinType">
                <xsd:attribute name="canceled" type="xsd:boolean"/>
                <xsd:attribute name="replaces" type="tns:SsinType"/>
            </xsd:extension>
        </xsd:simpleContent>
    </xsd:complexType>
    <xsd:complexType name="SsinWithCanceledAndReplacedByStatusType">
        <xsd:simpleContent>
            <xsd:extension base="tns:SsinType">
                <xsd:attribute name="canceled" type="xsd:boolean"/>
                <xsd:attribute name="replacedBy" type="tns:SsinType"/>
            </xsd:extension>
        </xsd:simpleContent>
    </xsd:complexType>
</xsd:schema>
